/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Contravention as PrismaContravention } from "@prisma/client";

export class ContraventionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ContraventionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.contravention.count(args);
  }

  async contraventions<T extends Prisma.ContraventionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ContraventionFindManyArgs>
  ): Promise<PrismaContravention[]> {
    return this.prisma.contravention.findMany<Prisma.ContraventionFindManyArgs>(
      args
    );
  }
  async contravention<T extends Prisma.ContraventionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ContraventionFindUniqueArgs>
  ): Promise<PrismaContravention | null> {
    return this.prisma.contravention.findUnique(args);
  }
  async createContravention<T extends Prisma.ContraventionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ContraventionCreateArgs>
  ): Promise<PrismaContravention> {
    return this.prisma.contravention.create<T>(args);
  }
  async updateContravention<T extends Prisma.ContraventionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ContraventionUpdateArgs>
  ): Promise<PrismaContravention> {
    return this.prisma.contravention.update<T>(args);
  }
  async deleteContravention<T extends Prisma.ContraventionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ContraventionDeleteArgs>
  ): Promise<PrismaContravention> {
    return this.prisma.contravention.delete(args);
  }
}
