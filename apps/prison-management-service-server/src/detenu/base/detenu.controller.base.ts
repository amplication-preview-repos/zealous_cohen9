/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DetenuService } from "../detenu.service";
import { DetenuCreateInput } from "./DetenuCreateInput";
import { Detenu } from "./Detenu";
import { DetenuFindManyArgs } from "./DetenuFindManyArgs";
import { DetenuWhereUniqueInput } from "./DetenuWhereUniqueInput";
import { DetenuUpdateInput } from "./DetenuUpdateInput";

export class DetenuControllerBase {
  constructor(protected readonly service: DetenuService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Detenu })
  async createDetenu(@common.Body() data: DetenuCreateInput): Promise<Detenu> {
    return await this.service.createDetenu({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Detenu] })
  @ApiNestedQuery(DetenuFindManyArgs)
  async detenus(@common.Req() request: Request): Promise<Detenu[]> {
    const args = plainToClass(DetenuFindManyArgs, request.query);
    return this.service.detenus({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Detenu })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async detenu(
    @common.Param() params: DetenuWhereUniqueInput
  ): Promise<Detenu | null> {
    const result = await this.service.detenu({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Detenu })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDetenu(
    @common.Param() params: DetenuWhereUniqueInput,
    @common.Body() data: DetenuUpdateInput
  ): Promise<Detenu | null> {
    try {
      return await this.service.updateDetenu({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Detenu })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDetenu(
    @common.Param() params: DetenuWhereUniqueInput
  ): Promise<Detenu | null> {
    try {
      return await this.service.deleteDetenu({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
