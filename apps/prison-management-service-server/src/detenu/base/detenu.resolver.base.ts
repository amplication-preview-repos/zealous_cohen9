/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Detenu } from "./Detenu";
import { DetenuCountArgs } from "./DetenuCountArgs";
import { DetenuFindManyArgs } from "./DetenuFindManyArgs";
import { DetenuFindUniqueArgs } from "./DetenuFindUniqueArgs";
import { DeleteDetenuArgs } from "./DeleteDetenuArgs";
import { DetenuService } from "../detenu.service";
@graphql.Resolver(() => Detenu)
export class DetenuResolverBase {
  constructor(protected readonly service: DetenuService) {}

  async _detenusMeta(
    @graphql.Args() args: DetenuCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Detenu])
  async detenus(@graphql.Args() args: DetenuFindManyArgs): Promise<Detenu[]> {
    return this.service.detenus(args);
  }

  @graphql.Query(() => Detenu, { nullable: true })
  async detenu(
    @graphql.Args() args: DetenuFindUniqueArgs
  ): Promise<Detenu | null> {
    const result = await this.service.detenu(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Detenu)
  async deleteDetenu(
    @graphql.Args() args: DeleteDetenuArgs
  ): Promise<Detenu | null> {
    try {
      return await this.service.deleteDetenu(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
