/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Detenu as PrismaDetenu } from "@prisma/client";

export class DetenuServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.DetenuCountArgs, "select">): Promise<number> {
    return this.prisma.detenu.count(args);
  }

  async detenus<T extends Prisma.DetenuFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DetenuFindManyArgs>
  ): Promise<PrismaDetenu[]> {
    return this.prisma.detenu.findMany<Prisma.DetenuFindManyArgs>(args);
  }
  async detenu<T extends Prisma.DetenuFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DetenuFindUniqueArgs>
  ): Promise<PrismaDetenu | null> {
    return this.prisma.detenu.findUnique(args);
  }
  async createDetenu<T extends Prisma.DetenuCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DetenuCreateArgs>
  ): Promise<PrismaDetenu> {
    return this.prisma.detenu.create<T>(args);
  }
  async updateDetenu<T extends Prisma.DetenuUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DetenuUpdateArgs>
  ): Promise<PrismaDetenu> {
    return this.prisma.detenu.update<T>(args);
  }
  async deleteDetenu<T extends Prisma.DetenuDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DetenuDeleteArgs>
  ): Promise<PrismaDetenu> {
    return this.prisma.detenu.delete(args);
  }
}
