/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PrisonService } from "../prison.service";
import { PrisonCreateInput } from "./PrisonCreateInput";
import { Prison } from "./Prison";
import { PrisonFindManyArgs } from "./PrisonFindManyArgs";
import { PrisonWhereUniqueInput } from "./PrisonWhereUniqueInput";
import { PrisonUpdateInput } from "./PrisonUpdateInput";

export class PrisonControllerBase {
  constructor(protected readonly service: PrisonService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Prison })
  async createPrison(@common.Body() data: PrisonCreateInput): Promise<Prison> {
    return await this.service.createPrison({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Prison] })
  @ApiNestedQuery(PrisonFindManyArgs)
  async prisons(@common.Req() request: Request): Promise<Prison[]> {
    const args = plainToClass(PrisonFindManyArgs, request.query);
    return this.service.prisons({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Prison })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async prison(
    @common.Param() params: PrisonWhereUniqueInput
  ): Promise<Prison | null> {
    const result = await this.service.prison({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Prison })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePrison(
    @common.Param() params: PrisonWhereUniqueInput,
    @common.Body() data: PrisonUpdateInput
  ): Promise<Prison | null> {
    try {
      return await this.service.updatePrison({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Prison })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePrison(
    @common.Param() params: PrisonWhereUniqueInput
  ): Promise<Prison | null> {
    try {
      return await this.service.deletePrison({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
