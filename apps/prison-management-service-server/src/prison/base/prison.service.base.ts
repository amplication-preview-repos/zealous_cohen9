/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Prison as PrismaPrison } from "@prisma/client";

export class PrisonServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PrisonCountArgs, "select">): Promise<number> {
    return this.prisma.prison.count(args);
  }

  async prisons<T extends Prisma.PrisonFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PrisonFindManyArgs>
  ): Promise<PrismaPrison[]> {
    return this.prisma.prison.findMany<Prisma.PrisonFindManyArgs>(args);
  }
  async prison<T extends Prisma.PrisonFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PrisonFindUniqueArgs>
  ): Promise<PrismaPrison | null> {
    return this.prisma.prison.findUnique(args);
  }
  async createPrison<T extends Prisma.PrisonCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PrisonCreateArgs>
  ): Promise<PrismaPrison> {
    return this.prisma.prison.create<T>(args);
  }
  async updatePrison<T extends Prisma.PrisonUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PrisonUpdateArgs>
  ): Promise<PrismaPrison> {
    return this.prisma.prison.update<T>(args);
  }
  async deletePrison<T extends Prisma.PrisonDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PrisonDeleteArgs>
  ): Promise<PrismaPrison> {
    return this.prisma.prison.delete(args);
  }
}
